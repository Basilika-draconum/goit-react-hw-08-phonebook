{"version":3,"file":"static/js/155.b5514f7a.chunk.js","mappings":"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","sources":[" redux/contacts/contactsSelector.js","../node_modules/nanoid/index.browser.js","webpack://goit-react-hw-08-phonebook/./src/components/FormPhonebook/formPhonebook.module.scss?fef2","components/FormPhonebook/FormPhonebook.jsx"," redux/filter/filterSelector.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactsList/contactsList.module.scss?cf93","components/ContactsList/ContactsList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/filter.module.scss?8942","components/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/phonebook.module.scss?0e87","components/Phonebook.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"formPhonebook_wrapper__ygDq6\",\"formPhonebook\":\"formPhonebook_formPhonebook__Y2AYb\",\"formInput\":\"formPhonebook_formInput__4pSEQ\",\"formBtn\":\"formPhonebook_formBtn__LGPwW\",\"formLabel\":\"formPhonebook_formLabel__UV-5U\"};","// import { addContactAction } from ' redux/contacts/contact-slice';\nimport { postContactThunk } from ' redux/contacts/contacts-thunk';\nimport {\n  selectContacts,\n  // selectError,\n  // selectIsLoading,\n} from ' redux/contacts/contactsSelector';\nimport { nanoid } from 'nanoid';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport css from './formPhonebook.module.scss';\n\nconst FormPhonebook = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const actions = { name: setName, number: setNumber };\n  const dispatch = useDispatch();\n  const handleChange = e => {\n    const { name, value } = e.target;\n    actions[name](value);\n  };\n\n  const contacts = useSelector(selectContacts);\n\n  // useEffect(() => {\n  //   dispatch(getContactsThunk());\n  // }, [dispatch]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const newContact = { name, number, id: nanoid() };\n    if (\n      contacts.some(\n        item => item.name.toLowerCase().trim() === name.toLowerCase().trim()\n      )\n    ) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n    dispatch(postContactThunk(newContact));\n\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <div className={css.wrapper}>\n      <form className={css.formPhonebook} onSubmit={handleSubmit}>\n        <label className={css.formLabel} htmlFor=\"name\">\n          Name\n        </label>\n        <input\n          className={css.formInput}\n          onChange={handleChange}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n\n        <label className={css.formLabel} htmlFor=\"number\">\n          Number\n        </label>\n        <input\n          className={css.formInput}\n          onChange={handleChange}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n        <button className={css.formBtn} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default FormPhonebook;\n","import { selectContacts } from ' redux/contacts/contactsSelector';\n\nexport const selectFilter = state => state.filter;\nexport const selectFilteredContacts = state => {\n  const filter = selectFilter(state);\n  const contacts = selectContacts(state);\n  return contacts.filter(elem =>\n    elem.name.toLowerCase().includes(filter.toLowerCase())\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contact\":\"contactsList_contact__VHhdD\",\"contactBtn\":\"contactsList_contactBtn__j8ihD\"};","// import { deleteContactAction } from ' redux/contacts/contact-slice';\nimport {\n  deleteContactThunk,\n  getContactsThunk,\n} from ' redux/contacts/contacts-thunk';\nimport { selectFilteredContacts } from ' redux/filter/filterSelector';\nimport { useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport css from './contactsList.module.scss';\n\nconst ContactsList = () => {\n  const contacts = useSelector(selectFilteredContacts);\n  const dispatch = useDispatch();\n  const deleteIdRef = useRef(null);\n\n  const deleteContact = async id => {\n    deleteIdRef.current = id;\n    dispatch(deleteContactThunk(id))\n      .unwrap()\n      .then(() => dispatch(getContactsThunk()));\n  };\n\n  const contact = contacts.map(item => {\n    return (\n      <li key={item.id} className={css.contact}>\n        {item.name}: {item.number}\n        <button\n          type=\"button\"\n          className={css.contactBtn}\n          onClick={() => {\n            deleteContact(item.id);\n          }}\n        >\n          Delete\n        </button>\n      </li>\n    );\n  });\n  return <ul>{contact}</ul>;\n};\n\nexport default ContactsList;\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"filter_title__BBA1O\",\"filterInput\":\"filter_filterInput__tLdb9\"};","import css from './filter.module.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from ' redux/filter/filterSelector';\nimport { filterContactsAction } from ' redux/filter/filter-slice';\n\nconst Filter = () => {\n  const filterValue = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  return (\n    <div>\n      <h6 className={css.title}>Find contacts by name</h6>\n      <input\n        className={css.filterInput}\n        type=\"text\"\n        name=\"filter\"\n        defaultValue={filterValue}\n        onChange={e => dispatch(filterContactsAction(e.target.value))}\n      />\n    </div>\n  );\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"contacts\":\"phonebook_contacts__3KPic\",\"main\":\"phonebook_main__NUxi9\",\"main_title\":\"phonebook_main_title__9s8I2\"};","import FormPhonebook from './FormPhonebook/FormPhonebook';\nimport ContactsList from './ContactsList/ContactsList';\nimport Filter from './Filter/Filter';\nimport css from './phonebook.module.scss';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getContactsThunk } from ' redux/contacts/contacts-thunk';\n\nconst Phonebook = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getContactsThunk());\n  }, [dispatch]);\n\n  return (\n    <div className={css.main}>\n      <h2 className={css.main_title}>Phonebook</h2>\n      <FormPhonebook />\n      <Filter />\n      <ContactsList />\n    </div>\n  );\n};\n\nexport default Phonebook;\n"],"names":["selectContacts","state","contacts","items","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","useState","name","setName","number","setNumber","actions","dispatch","useDispatch","handleChange","e","target","value","useSelector","className","css","onSubmit","preventDefault","newContact","some","item","toLowerCase","trim","alert","postContactThunk","htmlFor","onChange","type","pattern","title","required","selectFilter","filter","selectFilteredContacts","elem","includes","deleteIdRef","useRef","deleteContact","current","deleteContactThunk","unwrap","then","getContactsThunk","contact","map","onClick","filterValue","defaultValue","filterContactsAction","useEffect"],"sourceRoot":""}